Component({
  options: {
    addGlobalClass: true,
  },
  data: {
    internalValue: '',
    internalFocus: false,
  },
  properties: {
    value: {
      type: String,
      observer() {
        // if parent component doesn't change the value the re-rendering will be ignored
        if (this.properties.value !== this.data.internalValue) {
          this.setData({
            internalValue: this.properties.value,
          });
        }
      },
    },
    className: {
      type: String,
    },
    theStyle: {
      type: String,
    },
    gojiId: {
      type: Number,
    },
    type: {
      type: String,
    },
    password: {
      type: Boolean,
    },
    placeholder: {
      type: String,
    },
    placeholderStyle: {
      type: String,
    },
    placeholderClass: {
      type: String,
    },
    disabled: {
      type: Boolean,
    },
    maxlength: {
      type: Number,
    },
    cursorSpacing: {
      type: Number,
    },
    autoFocus: {
      type: Boolean,
    },
    focus: {
      type: Boolean,
      observer() {
        this.setData({
          internalFocus: this.properties.focus,
        });
      },
    },
    confirmType: {
      type: String,
    },
    confirmHold: {
      type: Boolean,
    },
    cursor: {
      type: Number,
    },
    selectionStart: {
      type: Number,
    },
    selectionEnd: {
      type: Number,
    },
    adjustPosition: {
      type: Boolean,
    },
  },
  lifetimes: {
    attached() {
      Object.e.subtreeAttached(this.properties.gojiId, this);
      this.setData({
        internalValue: this.properties.value,
        internalFocus: this.properties.focus,
      });
    },
    detached() {
      Object.e.subtreeDetached(this.properties.gojiId);
    },
  },
  methods: {
    e(evt) {
      Object.e.trigger(evt);
    },
    onInput(evt) {
      // save new value without rerendering
      this.data.internalValue = evt.detail.value;
      this.e(evt);
    },
  },
});
